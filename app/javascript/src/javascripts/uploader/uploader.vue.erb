<template>
    <div class="flex-grid-outer">
        <div class="col box-section" style="flex: 2 0 0;">
            <div class="flex-grid border-bottom">
                <div class="col">
                    <label class="section-label" for="post_file">File</label>
                    <div class="hint"><a href="/help/supported_filetypes">Supported Formats</a></div>
                </div>
                <div class="col2">
                  <file-input @uploadValueChanged="uploadValue = $event"
                    @previewChanged="previewData = $event"
                    @invalidUploadValueChanged="invalidUploadValue = $event"></file-input>
                </div>
            </div>
            <file-preview classes="box-section in-editor below-upload" :data="previewData"></file-preview>
            <div class="flex-grid border-bottom">
                <div class="col">
                    <label class="section-label" for="post_sources">Sources</label>
                    <div>Include the original link to the content here. For social media like Twitter/X, use a link to the post, not a direct link to the media. If you don't know of an original link or if this content has never been posted anywhere, check 'No available source.'
                    </div>
                </div>
                <div class="col2">
                    <sources :maxSources="10" :showErrors="showErrors" v-model:sources="sources" @sourceWarning="sourceWarning = $event"></sources>
                </div>
            </div>
            <template v-if="normalMode">
                <div class="flex-grid border-bottom">
                    <div class="col">
                        <label class="section-label" for="names">Category</label>
                        <div>Select the Category the Post belongs to. Only use multiple category tags when necessary: a post may feature both Milady[milady] and Remilio[remilio] without being specifically a Milady[milady] or Remilio[remilio] meme; a Milady meme that has been CHEESEWORLD[cheeseworld] deepfried is still a Milady meme.</div>
                    </div>
                    <div class="col2">
                        <div class="flex-wrap">
                            <div v-for="tag in categoryTags" :key="tag.name" class="mr-2 mb-2">
                                <label class="flex items-center">
                                    <input type="checkbox" :value="tag.value" v-model="selectedCategoryTags">
                                    <span class="ml-1">{{ tag.name }}</span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="flex-grid border-bottom">
                    <div class="col">
                        <label class="section-label" for="post_sex_tags">Type</label>
                        <div>
                            Select all which describe the type of the Post without detailing its content. This can relate to its format, style and creation.
                        </div>
                    </div>
                    <div class="col2">
                        <div class="flex-wrap">
                            <image-checkbox :check="check" :checks="checkboxes.selected" v-for="check in checkboxes.type"
                                            @set="setCheck"
                                            :key="check.name"></image-checkbox>
                        </div>
                        <textarea class="tag-textarea" rows="2" v-model="tagEntries.character" id="post_character"
                                  placeholder="Ex: hyperedit slideshow irl remixed_content motivational chinese"
                                  data-autocomplete="tag-edit"></textarea>
                    </div>
                </div>
                <div class="flex-grid border-bottom" v-if="isCheeseWorldSelected">
                    <div class="col">
                        <label class="section-label">CHEESEWORLD Type</label>
                        <div>Select type tags specific to the CHEESEWORLD[cheeseworld] Category here. Do not include content details. CHEESEWORLD Meme[cheeseworld_meme] should only be used for image content that has been deepfried and watermarked. [cheeseworld_raw] is for non-fried, non-captioned content. CHEESEWORLD Memes[cheeseworld_meme] should refer to the Parent Post ID of their respective CHEESEWORLD Raw[cheeseworld_raw] whenever possible. You may describe a gangstamp using tags here. <a href="/guidelines">See also the guidelines</a></div>
                    </div>
                    <div class="col2">
                        <div class="flex-wrap">
                            <image-checkbox :check="check" :checks="checkboxes.selected"
                                            v-for="check in checkboxes.cheeseworld" @set="setCheck"
                                            :key="check.name"></image-checkbox>
                        </div>
                        <textarea class="tag-textarea" rows="2" v-model="tagEntries.species" id="post_species"
                                  placeholder="Ex: gangstamp_godzamn gangstamp_master_baiters gangstamp_lonely_tiger nested_gangstamp"
                                  data-autocomplete="tag-edit"></textarea>
                    </div>
                </div>
            </template>
            <div class="flex-grid come-together-now">
                <div class="col">
                    <label class="section-label" for="post_tags">General Tags</label>
                    <div>
                        All tags relating to the Post its content and characteristics go here. Tag according to visible content foremost, and restrict yourself from describing abstract concepts: a tag such as 'Faustian' is likely to be incoherent between users. <a href="/rules">Need help? Click here</a>
                    </div>
                </div>
                <div class="col2">
                  <file-preview classes="box-section in-editor" :data="previewData"></file-preview>
                    <div class="box-section background-red" v-show="showErrors && notEnoughTags">
                        You must provide at least <b>{{4 - tagCount}}</b> more tags. Tags in other sections count
                        towards this total.
                    </div>
                    <div v-show="!tagPreview.show">
                        <textarea class="tag-textarea" id="post_tags" v-model="tagEntries.other" rows="5"
                                  ref="otherTags" data-autocomplete="tag-edit"></textarea>
                    </div>
                    <div v-show="tagPreview.show">
                        <tag-preview :tags="tagPreview.tags" :loading="tagPreview.loading"
                                     @close="previewFinalTags"></tag-preview>
                    </div>

                    <div class="related-tag-functions">
                        Related:
                        <a href="#" @click.prevent="findRelated()">Tags</a> |
                        <a href="#" @click.prevent="findRelated(1)">Categories</a> |
                        <a href="#" @click.prevent="findRelated(3)">Copyrights</a> |
                        <a href="#" @click.prevent="findRelated(4)">Characters</a> |
                        <a href="#" @click.prevent="findRelated(5)">Types</a> |
                        <a href="#" @click.prevent="findRelated(7)">Metatags</a> |
                        <a href="#" @click.prevent="previewFinalTags">Preview Final Tags</a>
                    </div>
                </div>
            </div>
            <div class="flex-grid border-bottom over-me">
                <related-tags v-if="relatedTags.length" :tags="tagsArray" :related="relatedTags"
                              :loading="loadingRelated"
                              @tag-active="pushTag"></related-tags>
            </div>
            <div class="flex-grid border-bottom">
                <div class="col">
                    <label class="section-label">Parent Post ID</label>
                    <div>If your post is a variant, edit, or higher quality/resolution of an existing post, add its Post ID here.</div>
                </div>
                <div class="col2">
                    <input v-model.number="parentID" placeholder="Ex. 12345"/>
                </div>
            </div>
            <div v-if="allowLockedTags" class="flex-grid border-bottom">
                <div class="col">
                    <label class="section-label">Locked Tags</label>
                </div>
                <div class="col2">
                    <input type="text" v-model="lockedTags" data-autocomplete="tag-query"/>
                </div>
            </div>
            <div class="flex-grid border-bottom">
                <div class="col">
                    <label class="section-label" for="post_description">Description</label>
                    <div>If your Post media source contains external captions, from e.g. Twitter/X, add them to the Post description. Try to add relevant text present on the media to the Post description, e.g. CHEESEWORLD image macro top and bottom texts. Any other details that can't or shouldn't be expressed through tags go here as well.</div>
                </div>
                <div class="col2">
                    <textarea class="dtext-formatter-input tag-textarea dtext" id="post_description" rows="10" v-model="description"></textarea>
                </div>
            </div>
            <div class="flex-grid">
                <div class="col"></div>
                <div class="col2">
                    <div class="box-section background-red" v-show="preventUpload && showErrors">
                        Unmet requirements above prevent the submission of the post.
                    </div>
                    <div class="box-section background-green" v-show="submitting">
                        Submitting your post, please wait.
                    </div>
                    <div class="box-section background-red" v-show="error">
                        {{ error }}
                    </div>
                    <div class="box-section background-red" v-show="duplicateId">
                        Post is a duplicate of <a :href="duplicatePath">post #{{duplicateId}}.</a>
                    </div>
                    <button @click="submit" :disabled="(showErrors && preventUpload) || submitting" accesskey="s">
                        {{ submitting ? 'Uploading...' : 'Upload' }}
                    </button>
                </div>
            </div>
        </div>
        <div id="preview-sidebar" class="col box-section" style="margin-left: 10px; padding: 10px;">
            <file-preview classes="in-sidebar" :data="previewData"></file-preview>
        </div>
    </div>
</template>

<script>
  import sources from './sources.vue';
  import checkbox from './checkbox.vue';
  import relatedTags from './related.vue';
  import tagPreview from './tag_preview.vue';
  import filePreview from './file_preview.vue';
  import fileInput from './file_input.vue';

  const type_checks = [
    {name: 'Meme', tag: 'meme'},
    {name: 'Non-meme', tag: 'non_meme'},
    {name: 'Image Macro', tag: 'imagemacro'},
    {name: 'Captioned', tag: 'captioned'},
    {name: 'Uncaptioned', tag: 'uncaptioned'},
    {name: 'CHEESEWORLD Watermark', tag: 'cheeseworld_watermark'},
    {name: 'Drawing', tag: 'drawing'},
    {name: 'AI-generated', tag: 'ai_generated'},
    {name: 'maker.remilia.org', tag: 'maker_remilia_org'}
  ];

  const cheeseworld_checks = [
    {name: 'CHEESEWORLD Meme', tag: 'cheeseworld_meme'},
    {name: 'CHEESEWORLD Raw', tag: 'cheeseworld_raw'},
    {name: 'CHEESEWORLD GIF', tag: 'cheeseworld_gif'},
    {name: 'CHEESEWORLD Video', tag: 'cheeseworld_video'},
    {name: 'Has Gangstamp', tag: 'has_gangstamp'},
    {name: 'No Gangstamp', tag: 'no_gangstamp'},
    {name: 'Is Gangstamp', tag: 'is_gangstamp'}
  ];

  function tagSorter(a, b) {
    return a.name > b.name ? 1 : -1;
  }

  function unloadWarning() {
    if (this.allowNavigate || (this.uploadValue === "" && this.tags === "")) {
      return;
    }
    return true;
  }

  export default {
    components: {
      'sources': sources,
      'image-checkbox': checkbox,
      'related-tags': relatedTags,
      'tag-preview': tagPreview,
      'file-preview': filePreview,
      'file-input': fileInput,
    },
    data() {
      const allChecks = {};
      const addChecks = function (check) {
        if (typeof check['tag'] !== "undefined") {
          allChecks[check.tag] = true;
          return
        }
        allChecks[check.name.toLowerCase().replace(' ', '_')] = true;
      };
      type_checks.forEach(addChecks);
      cheeseworld_checks.forEach(addChecks);

      return {
        safe: window.uploaderSettings.safeSite,
        showErrors: false,
        allowNavigate: false,
        submitting: false,

        previewData: {
          url: '',
          isVideo: false,
        },
        uploadValue: '',
        invalidUploadValue: false,

        sourceWarning: false,
        sources: [''],
        normalMode: !window.uploaderSettings.compactMode,

        categoryTags: [
          { name: 'Milady', value: 'milady' },
          { name: 'Remilia', value: 'remilia' },
          { name: 'CHEESEWORLD', value: 'cheeseworld' },
          { name: 'Remilio', value: 'remilio' },
          { name: 'YAYO', value: 'yayo' },
          { name: 'Kagami', value: 'kagami' },
          { name: 'Fumo', value: 'fumo' },
          { name: 'Bonkler', value: 'bonkler' },
          { name: 'Other', value: 'other' }
        ],
        selectedCategoryTags: [],

        checkboxes: {
          type: type_checks,
          cheeseworld: cheeseworld_checks,
          selected: {},
          all: allChecks
        },
        tagEntries: {
          artist: "", // Used for category
          character: "", // Used for type
          species: "", // Used for cheeseworld type
          content: "", // Not used
          other: "", // Used for general tags
        },

        tagPreview: {
          loading: false,
          show: false,
          tags: []
        },

        allowLockedTags: window.uploaderSettings.allowLockedTags,
        lockedTags: '',
        allowRatingLock: window.uploaderSettings.allowRatingLock,
        ratingLocked: false,
        allowUploadAsPending: window.uploaderSettings.allowUploadAsPending,
        uploadAsPending: false,

        relatedTags: [],
        lastRelatedCategoryId: undefined,
        loadingRelated: false,

        parentID: '',
        description: '',
        rating: 's', // Always set to Safe
        error: '',
        duplicateId: 0,
      };
    },
    mounted() {
      const self = this;
      window.onbeforeunload = unloadWarning.bind(self);
      const params = new URLSearchParams(window.location.search);
      const fillField = function(field, key) {
        if(params.has(key)) {
          self[field] = params.get(key);
        }
      };
      const fillFieldBool = function(field, key) {
        if(params.has(key)) {
          self[field] = (params.get(key) === 'true');
        }
      };

      // Import tags from query parameters
      const fillTags = function() {
        const queryList = ["tags-artist", "tags-character", "tags-species", "tags-content"];

        if(params.has("tags"))
          self.importTags(params.get("tags"), "other");

        if(self.normalMode) {
          for(const name of queryList) {
            if(!params.has(name)) continue;
            self.importTags(params.get(name), name.replace("tags-", ""));
          }
        } else {
          // No other inputs in advanced mode, so we can avoid
          // recalculating duplicates every time in importTags
          const tags = [];
          for(const name of queryList) {
            if(!params.has(name)) continue;
            tags.push(params.get(name));
          }
          if(tags.length > 0)
            self.importTags(tags.join(" "), "other");
        }
      };

      fillField('parentID', 'parent');
      fillField('description', 'description');
      fillTags();
      // Set rating to Safe
      this.rating = 's';
      if(params.has('sources')) {
        self.sources = params.get('sources').split(',');
      }
      if(this.allowLockedTags)
        fillField('lockedTags', 'locked_tags');
    },
    methods: {
      setCheck(tag, value) {
        this.checkboxes.selected[tag] = value;
      },
      submit() {
        this.showErrors = true;
        this.error = '';
        if (this.preventUpload || this.submitting)
          return;
        const self = this;
        this.submitting = true;
        
        // Convert category selections to tags
        if (this.selectedCategoryTags.length > 0) {
          this.tagEntries.artist = this.selectedCategoryTags.join(' ');
        }
        
        const data = new FormData();
        if (typeof this.uploadValue === "string") {
          data.append('upload[direct_url]', this.uploadValue);
        } else {
          data.append('upload[file]', this.uploadValue);
        }
        data.append('upload[tag_string]', this.tags);
        data.append('upload[rating]', 's'); // Always set to Safe
        data.append('upload[source]', this.sources.join('\n'));
        data.append('upload[description]', this.description);
        data.append('upload[parent_id]', this.parentID);
        if (this.allowLockedTags)
          data.append('upload[locked_tags]', this.lockedTags);
        if (this.allowUploadAsPending)
          data.append('upload[as_pending]', this.uploadAsPending);
        jQuery.ajax('/uploads.json', {
          contentType: false,
          processData: false,
          method: 'POST',
          type: 'POST',
          data: data,
          success(data) {
            self.submitting = false;
            self.allowNavigate = true;
            Danbooru.notice('Post uploaded successfully.');
            location.assign(data.location);
          },
          error(data) {
            self.submitting = false;
            const data2 = data.responseJSON;
            try {
              if (data2 && data2.reason === 'duplicate') {
                self.duplicateId = data2.post_id;
              }
              if (data2 && ['duplicate', 'invalid'].indexOf(data2.reason) !== -1) {
                self.error = data2.message;
              } else if (data2 && data2.message) {
                self.error = 'Error: ' + data2.message;
              } else {
                self.error = 'Error: ' + data2.reason;
              }
            } catch (e) {
              self.error = 'Error: Unknown error! ' + JSON.stringify(data2);
            }
          }
        });
      },
      pushTag(tag, add) {
        this.tagPreview.show = false;
        const isCheck = typeof this.checkboxes.all[tag] !== "undefined";
        // In advanced mode we need to push these into the tags area because there are no checkboxes or other
        // tag fields so we can't see them otherwise.
        if (isCheck && this.normalMode) {
          this.setCheck(tag, add);
          return;
        }
        const tags = this.tagEntries.other ? this.tagEntries.other.trim().split(' ') : [];
        const tagIdx = tags.indexOf(tag);
        if (add) {
          if (tagIdx === -1)
            tags.push(tag);
        } else {
          if (tagIdx === -1)
            return;
          tags.splice(tagIdx, 1);
        }
        this.tagEntries.other = tags.join(' ') + ' ';
      },

      /**
       * Used to import tags from the query parameters
       * @param {string} tags Raw tag string
       * @param {string} input Which of the tagEntries the tags should be added to
       */
      importTags(tags, input) {
        this.tagPreview.show = false;
        const tagsA = (tags + "").trim().split(" ").filter(n => n);

        // Dedupe
        let tagsB = this.normalMode ? [] : (this.tagEntries.other || "").trim().split(" ");
        tagsA.forEach((tag) => {
          if(tagsB.indexOf(tag) >= 0) return;
          // In advanced mode, checkboxes are not available
          if(this.normalMode && typeof this.checkboxes.all[tag] !== "undefined")
            this.setCheck(tag, true);
          tagsB.push(tag);
        });

        // Without a space at the end, vue panics
        this.tagEntries[this.normalMode ? input : "other"] = tagsB.join(" ") + " ";
      },

      previewFinalTags() {
        if (this.tagPreview.loading)
          return;
        if (this.tagPreview.show) {
          this.tagPreview.show = false;
          return;
        }
        this.tagPreview.loading = true;
        this.tagPreview.show = true;
        this.tagPreview.tags = [];
        const self = this;
        const data = {tags: this.tags};
        jQuery.ajax("/tags/preview.json", {
          method: 'POST',
          type: 'POST',
          data: data,
          success: function (result) {
            self.tagPreview.loading = false;
            self.tagPreview.tags = result;
          },
          error: function (result) {
            self.tagPreview.loading = false;
            self.tagPreview.tags = [];
            self.tagPreview.show = false;
            Danbooru.error('Error loading tag preview ' + result);
          }
        })
      },
      findRelated(categoryId) {
        const self = this;
        if (self.loadingRelated)
          return;
        if (self.relatedTags.length > 0 && self.lastRelatedCategoryId === categoryId) {
          self.relatedTags = [];
          return;
        }
        const convertResponse = function (respData) {
          const sortedRelated = [];
          for (const key in respData) {
            if (!respData.hasOwnProperty(key))
              continue;
            if (!respData[key].length)
              continue;
            sortedRelated.push({title: 'Related: ' + key, tags: respData[key].sort(tagSorter)});
          }
          return sortedRelated;
        };
        const getSelectedTags = function () {
          const field = self.$refs['otherTags'];
          if (!field.hasOwnProperty('selectionStart'))
            return null;
          const length = field.selectionEnd - field.selectionStart;
          if (length)
            return field.value.substr(field.selectionStart, length);
          return null;
        };
        this.loadingRelated = true;
        this.relatedTags = [];
        const selectedTags = getSelectedTags();
        const params = selectedTags ? {query: selectedTags} : {query: this.tags};

        if (categoryId)
          params['category_id'] = categoryId;
        $.getJSON("/related_tag/bulk.json", params, function (data) {
          self.relatedTags = convertResponse(data);
          self.lastRelatedCategoryId = categoryId;
        }).always(function () {
          self.loadingRelated = false;
        });
      }
    },
    computed: {
      isCheeseWorldSelected() {
        return this.selectedCategoryTags.includes('cheeseworld');
      },
      tags() {
        const self = this;
        
        // Add selected category tags
        let categorTags = this.selectedCategoryTags.join(' ');
        
        if (!this.normalMode)
          return this.tagEntries.other;
          
        const checked = Object.keys(this.checkboxes.selected).filter(function (x) {
          return self.checkboxes.selected[x] === true;
        });
        
        return [categorTags, checked.join(' '), this.tagEntries.other, this.tagEntries.character,
          this.tagEntries.species].join(' ').replace(',', ' ').trim().replace(/ +/g, ' ');
      },
      tagsArray() {
        return this.tags.toLowerCase().split(' ').filter(x => x);
      },
      tagCount: function () {
        return this.tagsArray.length;
      },
      notEnoughTags: function () {
        return this.tagCount < 4;
      },
      preventUpload: function () {
        return this.sourceWarning || this.notEnoughTags || this.invalidUploadValue;
      },
      duplicatePath: function () {
        return `/posts/${this.duplicateId}`;
      }
    }
  }
</script>